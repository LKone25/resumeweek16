name: bild push and deploy

on:
   push:
     branches: [ "main" ]
   pull_request:
     branches: [ "main" ]

permissions:
  id-token: write     # Required for OIDC
  contents: read

env:
  AWS_REGION: us-east-1
  AWS_ROLE: ${ secrets.AWS_ACTION_ROLE }
  ECR_REPO_NAME: devops
  IMAGE_TAG: ${{github.run_number }}
jobs:

    Build: 
      runs-on: ubuntu-latest  # githug actions runner
      steps:
          - name: Clone repo 
            uses: actions/checkout@v3 
          - name: AWS creds config
            uses: aws-actions/configure-aws-credentials@v3
            with:
              role-to-assume: ${{ env.AWS_ROLE }}   # Open Id Connect OIDC
              aws-region: ${{ env.AWS_REGION }}
          - name: Login to ECR
            uses: aws-actions/amazon-ecr-login@v1
            id: ecr_login
          - name: Build tag and push Docker image
            id : build_and_push
            run: |
                 docker build -t $${{ steps.ecr_login.outputs.registry }}/${{ env.ECR_REPO_NAME }}:${{env.IMAGE_TAG}} .
                 

          - name: Scan image with Trivy for vulnerabilities 
            uses: aquasecurity/trivy-action@master
            with:
                image-ref: $${{ steps.ecr_login.outputs.registry }}/${{ env.ECR_REPO_NAME }}:${{env.IMAGE_TAG}} # Scan the built image
                format: "table"
                exit-code: "0" # Do not fail the build on vulnerabilities
                severity: "CRITICAL,HIGH"
          - name: Push image to ECR
            run: |
                 docker push $${{ steps.ecr_login.outputs.registry }}/${{ env.ECR_REPO_NAME }}:${{env.IMAGE_TAG}}
                
          - name: Store image in github env 
            run: echo "Image=$${{ steps.ecr_login.outputs.registry }}/${{ env.ECR_REPO_NAME }}:${{env.IMAGE_TAG}}" >> $GITHUB_ENV
        
    #deploy:
     # runs-on: ubuntu-latest
      #needs: Build
     # steps: 
